@import '_mixins';

/********** General Page Style **********/
// TODO|kevin ahh I should probably pull some values out into constants huh
// TODO|kevin define SCSS variables for the color values, and then use them to define
// the root properties below AND to pass into the fallbacks.
// SCSS variables for use in light color scheme and as default fallback
// I would just leave them to be specified entirely in the custom properties if
// I weren't referencing them for the fallbacks in the var-with-fallback mixin
$bgcolor: #fff;
$textcolor: #000;
$capscolor: #6af;
$flaircolor: #cef;
$bordercolor: #69f;
$strokecolor: #000;
$inputborder: #888;
$inputfocus: #333;
$tabglowcolor: #aab;
// Also make variables for these default (light mode) text-shadow values, cus they're real long
$defaultcapsstroke: -1px -1px 0 $strokecolor,
                    1px -1px 0 $strokecolor,
                    -1px 1px 0 $strokecolor,
                    1px 1px 0 $strokecolor,
                    1px 0 0 $strokecolor, // TODO|kevin added these last four to cover horizontal gaps, but feels a BIT overkill...
                    -1px 0 0 $strokecolor,
                    0 1px 0 $strokecolor,
                    0 -1px 0 $strokecolor;
$defaulttabhover: 0 1px 0 0 $bordercolor,
                  0 5px 0 0 $bgcolor,
                  0 0 3px 0 $tabglowcolor;
// TODO|kevin do SOMETHING with the .button styles...

// TODO|kevin not positive about this additional attribute selector, but it makes some things easier for now.
:root,
[data-theme="light"] {
  // color-scheme: light dark;  // TODO|kevin hmmm... this might actually be causing more trouble than it's worth if it isn't accompanied by other stuff.
  color-scheme: light;
  // Set up color variables TODO|kevin better comments lmao also maybe alpha-sort some of this fuckin shit
  --main-bg-color: #{$bgcolor};
  --main-text-color: #{$textcolor};
  --initial-caps-color: #{$capscolor};
  --customrule-flair-color: #{$flaircolor};
  --initial-caps-stroke: #{$defaultcapsstroke};
  --main-content-border: 1px solid #{$bordercolor};
  --text-input-border: 1px solid #{$inputborder};
  --text-input-border-focus: 2px solid #{$inputfocus};
  --tab-hover-fill: #{$bordercolor};
  --tab-hover-border: 1px solid #{$tabglowcolor};
  --tab-hover-shadow: #{$defaulttabhover};
}

[data-theme="dark"] {
  color-scheme: dark;
  // TODO|kevin make sure this shit is TIGHTTT
  --main-bg-color: #223;  // TODO|kevin maybe #333 tho?
  --main-text-color: #eee;
  --initial-caps-color: #46e;
  --customrule-flair-color: #236;
  --initial-caps-stroke: -1px -1px 0 #fff,
                         1px -1px 0 #fff,
                         -1px 1px 0 #fff,
                         1px 1px 0 #fff,
                         1px 0 0 #fff,
                         -1px 0 0 #fff,
                         0 1px 0 #fff,
                         0 -1px 0 #fff;
  --main-content-border: 1px solid #{$bordercolor};
  --text-input-border: 1px solid #333;
  --text-input-border-focus: 2px solid #888;
  --tab-hover-fill: #{$bordercolor};  // TODO|kevin ehhhh...
  --tab-hover-border: 1px solid #{$tabglowcolor};  // TODO|kevin SHOULD this be different for dark mode...?
  --tab-hover-shadow: 0 1px 0 0 #{$bordercolor},
                      0 5px 0 0 #223,
                      0 0 3px 0 #dde;
}

html,
body {
  margin: 0;
  padding: 0;
  height: 100%;
}

body {
  @include var-with-fallback(background, --main-bg-color, $bgcolor);
  @include var-with-fallback(color, --main-text-color, $textcolor);
  font-family: "DejaVu Serif", Georgia, serif;
}

/*Easy but only partial remedy for pre-HTML5 browsers (if you happen to be
surfing the net from a fossil.) Doesn't help old versions of IE at all.*/
// TODO|kevin do I even need some of these now that I've gotten rid of the legacy index? I'm PRETTY SURE it isn't comprehensive
article,
aside,
details,
figcaption,
figure,
footer,
header,
hgroup,
menu,
nav,
section {
  display: block;
}

/** Content wrapper for the whole page **/
#wrapper {
  min-height: 100%;
  position: relative;
  overflow-x: hidden;
}

.main-header {
  margin: 0 2em;
}

h1,
h2 {
  font-variant: small-caps;
}

.subhead {
  font-size: 1.125em;
  font-style: italic;

  &::before {
    content: "\00a0\00a0\00a0\00a0\2767\00a0";
    font-weight: bold;
  }
}

/** Container for primary page content **/
#main-content {
  padding-bottom: 100px;

  p:first-of-type:not(.subhead)::first-letter,
  hr+p::first-letter {
    /*Yeeaaah, this is kind of egregious. It DOES look cool, though.*/
      float: left;
      @include var-with-fallback(color, --initial-caps-color, $capscolor);
      font-size: 2em;
      font-weight: bold;
      line-height: 1em;
      padding-right: 6px;
      @include var-with-fallback(text-shadow, --initial-caps-stroke, $defaultcapsstroke);
  }
}

/** Footer anchored to page bottom **/
#sticky-footer {
  width: 100%;
  height: 100px;
  padding: 0 2em;
  position: absolute;
  bottom: 0;
  left: 0;
}

a {
  cursor: pointer;
}

/** Custom horizontal rule **/
hr {
  border: 0;
  height: 1px;
  // This actually looks pretty good in both light and dark modes, not touchin' it
  background-image: linear-gradient(to right, rgba(0, 0, 0, 0), rgba(102, 153, 255, 0.75), rgba(0, 0, 0, 0));
}

/** Custom horizontal rule (div) **/
/* Shouts to css-tricks: https://css-tricks.com/examples/hrs/ Mine is on a div to be
somewhat less ambiguous WRT standard.*/
.customrule {
  margin-top: 20px;
  height: 15px;
  @include var-with-fallback(border, --main-content-border, 1px solid $bordercolor);
  // TODO|kevin make sure this width override actually works as intended
  border-width: 1px 0 0 0;
  border-radius: 15px;

  &::before {
    display: block;
    height: 15px;
    margin-top: -16px;
    /*One more than the height*/
    content: "";
    // TODO|kevin here too lmao
    @include var-with-fallback(border, --main-content-border, 1px solid $bordercolor);
    border-width: 0 0 1px 0;
    border-radius: 15px;
  }

  &::after {
    content: " ";
    height: 6px;
    width: 6px;
    position: relative;
    margin: 0 auto;
    display: block;
    @include var-with-fallback(border, --main-content-border, 1px solid $bordercolor);
    border-radius: 6px;
    @include var-with-fallback(background-color, --customrule-flair-color, $flaircolor);
    text-align: center;
    top: -4px;
  }
}

/** Run and Go Back button formatting **/
// TODO|kevin honestly this feels kinda ugly now. I can do better than this.
.button {
  font: bold .7em Arial;
  text-decoration: none;
  background-color: #ddd;
  color: #333;
  padding: 2px 6px 2px 6px;
  border: outset 2px #bbb;

  &:hover {
    background-color: #eee;
  }

  &:active {
    background-color: #999;
    border: inset 2px #bbb;
  }
}


/********** JavaScript-Python Interface **********/
// TODO|kevin some of this stuff MIGHT become irrelevant lol

/** Container div for script input **/
.script-interface {
  width: 500px;
  margin: 0 auto;
}

/** Input + output textbox formatting **/
.scriptbox {
  width: 40em;
  height: 5em;
  @include var-with-fallback(border, --text-input-border, 1px solid $inputborder);
  resize: none;

  &:focus {
    @include var-with-fallback(border, --text-input-border-focus, 2px solid $inputfocus);
  }
}

// TODO|kevin idk if I'll actually use any of these .ajax-status styles...
.ajax-status {
  text-align: center;
}

/** Status icons for AJAX submission buttons! **/
.ajax-status.success::before,
/*Add empty pseudo-element on left side as well,*/
.ajax-status.failure::before,
/*to keep the Run button centered.*/
.ajax-status.success::after,
.ajax-status.failure::after {
  position: relative;
  left: 10px;
  margin: 0;
  padding: 0px 8px;
  content: "";
  /*Necessary for the element to display*/
}

.ajax-status.success::after {
  background: transparent url('images/success.png') no-repeat;
}

.ajax-status.failure::after {
  background: transparent url('images/failure.gif') no-repeat;
}



/********** Tabbed Menu Buttons **********/

/** Container div for tab buttons **/
.tabs-menu {
  height: 3em;
  @include var-with-fallback(border-bottom, --main-content-border, 1px solid $bordercolor);
  text-align: center;
  position: relative;
  // TODO|kevin I might be able to just do something with overflow to make this scrollable at mobile widths
}

.tabs-list {
  margin: 0 auto;
  padding: 0;
  list-style: none;
  position: absolute;
  left: 0;
  right: 0;
  bottom: 0;
}

/** An individual item of the tab menu **/
.tab-title {
    display: inline-block;
    vertical-align: bottom;
    width: 6em;
    /*To stop tabs shifting from bold text*/
}

.tab-title>a {
  display: block;
  margin: 0 1px;
  padding: 5px 10px;
  @include var-with-fallback(background, --main-bg-color, $bgcolor);
  transition: background .2s ease, color .2s ease, padding .2s ease, border .2s ease;
  text-decoration: none;
  @include var-with-fallback(color, --main-text-color, $textcolor);
  @include var-with-fallback(border-top, --main-content-border, 1px solid $bordercolor);
  @include var-with-fallback(border-left, --main-content-border, 1px solid $bordercolor);
  @include var-with-fallback(border-right, --main-content-border, 1px solid $bordercolor);
}

.tab-title>a:hover {
  /*Hover highlighting for tab buttons*/
  @include var-with-fallback(background, --tab-hover-fill, $bordercolor);
  // TODO|kevin ehhhh I'm not sure about this one--at best it's certainly not very semantic!
  @include var-with-fallback(color, --main-bg-color, $bgcolor);  // color: #fff;
  @include var-with-fallback(border-top, --tab-hover-border, 1px solid $tabglowcolor);
  @include var-with-fallback(border-left, --tab-hover-border, 1px solid $tabglowcolor);
  @include var-with-fallback(border-right, --tab-hover-border, 1px solid $tabglowcolor);
  @include var-with-fallback(box-shadow, --tab-hover-shadow, $defaulttabhover);
}

.tab-title.active>a,
.tab-title.active>a:hover {
  position: relative;
  bottom: -1px;
  /*Shifts active tab down, obscuring tabs-menu border for tab effect*/
  padding: 10px;
  @include var-with-fallback(background, --main-bg-color, $bgcolor);
  @include var-with-fallback(color, --main-text-color, $textcolor);
  font-weight: bold;
  box-shadow: none;
}



/********** Tabbed Content Display **********/

/** Container for all the tab panels **/
#tabs-content {
  overflow: auto;
  /*Fix for horizontal scroll bar jump thanks to Ayke van Laetham: https://aykevl.nl/2014/09/fix-jumping-scrollbar*/
  margin-left: calc(100vw - 100% + 20px);
  margin-right: 20px;
  margin-top: 20px;
  margin-bottom: 20px;
}

/** Basic tab panel formatting **/
.tab-panel {
  margin: 0 auto;
  padding: 20px;
  width: 600px;
  @include var-with-fallback(border, --main-content-border, 1px solid $bordercolor);
  overflow: hidden;

  // TODO|kevin this should have a slight margin-bottom of its own (perhaps take
  // some off of #tabs-content) so that it looks less crowded in noscript mode

  &.active {
    display: block;
  }  

  &.inactive {
    display: none;
  }
}