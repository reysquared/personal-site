/*
 * Not all browsers support CSS custom properties still, hence this mixin. It
 * actually provides a fallback in two different ways. The first is the initial
 * declaration, to handle browsers that don't support var() in which case the
 * latter will be ignored entirely. However, for browsers that DO support it,
 * the custom property value is determined at runtime, so if it is invalid or
 * unset in that context, the first declaration will already have been discarded
 * and the value will become unset. Hence the second fallback, within the var()
 * itself, which is ONLY useful in browsers that support the feature.
*/
@mixin var-with-fallback($property, $varname, $fallback) {
  @if type-of($property) != string {
    @error "var-with-fallback $property must be a string (and SHOULD be a valid css property): #{$property}";
  }
  @if str-index($varname, "--") != 1 {
    @error "var-with-fallback requires $varname to be a valid custom property identifier: #{$varname}";
  }
  @if type-of($fallback) == null {
    @error "var-with-fallback $fallback value must not be null";
  }

  #{$property}: $fallback;
  #{$property}: var($varname, $fallback);
}