/********** General Page Style **********/

html,
body {
  /*Normally very helpful for readability in basic webpages, the automatic 
  margin etc. for the document often play poorly with more-styled layouts.
  As such they are explicitly zeroed here.*/
  margin: 0;
  padding: 0;
  height: 100%;
}

body {
/*Default typeface*/
font-family: "DejaVu Serif", Georgia, serif;
}

/*In the event you're using a browser that's old enough to not have HTML5
support, this will ensure the unknown elements are at least displayed as
block-level elements correctly (except in IE, which needs a JS workaround)*/
article,aside,details,figcaption,figure,
footer,header,hgroup,menu,nav,section {
    display:block;
}

/** Content wrapper for the whole page **/
#wrapper {
  min-height: 100%;
  position: relative;
  overflow-x: hidden; /*This prevents a frustrating bug where the divs for
  laying out the tab interface cause horizontal scroll bars to always
  appear. (Comment out this line to see what I mean.) There may be a wiser
  way to accomplish this.*/
}

.main-header {
  /*To shift page title in from the edge of the window a bit*/
  margin: 0 2em;
}

h1,h2 {
  font-variant: small-caps; /*For fun styles*/
}

/*Heading elements (h1-h6) have semantic content--they are headings for
their section of text. As such, we avoid using heading elements for sub-
headers, which we do not intend to define their own section of content.
This was previously handled using the hgroup element but it has since
been obsoleted at no significant loss.*/
.subhead {
  font-size: 1.125em;
  font-style: italic;
}

.subhead::before {
  /*Put a fun little ornamentation character in front of sub-headings.
  Honestly probably a bit silly, but a nice example of when you might
  use the ::before pseudo-element.*/
  content: "\00a0\00a0\00a0\00a0\2767\00a0";
  font-weight: bold;
}

figure img {
  width: 100%;
}

figure {
  text-align: center;
  max-width: 30%;
}

figcaption {
  /*Makes captions more diminutive. By default they are the same size as
  normal paragraph text.*/
  font-size: 70%;
}

/** Container for primary page content **/
#main-content {
  /*Just needs to be big enough to always leave room for the sticky footer*/
  padding-bottom: 100px;
}

#main-content p:first-of-type:not(.subhead)::first-letter,
#main-content hr + p::first-letter {
  /*A couple of cool CSS features here. First, :first-of-type selects (as you
  might guess) only the first child of type p of its parent element. Next, the
  :not() pseudo-class stops the rule from applying to sub-headings. Finally,
  ::first-letter is a pseudoelement which applies only to the first letter of
  a block, allowing us to create a cool drop-caps effect. Then the '+' or the
  'adjacent selector' selects only elements of type p that are immediately
  preceded by a horizontal rule. This should, roughly, give us the drop-caps
  styling on the first letter of every major section of text in paragraphs of
  the main content. Per-spec, the pseudo-element has to go last in the first
  selector to be valid CSS.*/
  float: left;
/*  color: #eaaa00;*/
  color: #6af;
  font-size: 2em;
  font-weight: bold;
  line-height: 1em;
  padding-right: 6px;
  /*It's possible that in the future you will be able to apply a text stroke
  to give letters a border effect. In the meantime, we must make do with four
  simultaneous drop shadows.*/
  text-shadow: -1px -1px 0 #000,
                1px -1px 0 #000,
               -1px  1px 0 #000,
                1px  1px 0 #000;
}

/** Footer anchored to page bottom **/
#sticky-footer {
  /* It's fine to have multiple footer elements, but we only want one that
  sticks to the very bottom of the page, or they might fight :( So this rule
  uses an ID selector, since IDs are necessarily unique. */
  width: 100%;
  height: 100px;
  padding: 0 2em; /*So footer content isn't right next to the window edge!*/
  position: absolute; /*Forces our footer to the actual foot of the page*/
  bottom: 0;
  left: 0;
}

a {
  cursor: pointer; /*Forces link pointer on <a> tags even with no HREF given
  so even "placeholder" links used only for JavaScript events will interact
  naturally with the mouse cursor*/
}

/** Custom horizontal rule **/
/*First a simple one...*/
hr {
  border: 0;
  height: 1px;
  /*(102,153,255) corresponds to #69f*/
  background-image: linear-gradient(to right, rgba(0,0,0,0), rgba(102,153,255,0.75), rgba(0,0,0,0));
}

/** Custom horizontal rule (div) **/
/*Then a more complicated one! This uses a class on a div, because using the
:before and :after pseudo-elements on <hr> elements is kind of weird--they
don't technically have any content, so hypothetically it shouldn't work at
all, and the behavior seems slightly inconsistent. It's possible this will
actually be an intended feature for hr elements in the future though, guess
it's up to W3C to clarify their interpretation of the spec.*/
.customrule {
  margin-top: 20px;
  height: 15px;
  border-style: solid;
  border-color: #69f;
  border-width: 1px 0 0 0;
  border-radius: 15px; /*Make a nice curved border*/
}

.customrule::before {
  /*We put a border on the :before element and then shift it down so that it overlays
  with the div's own border, creating a cool flare on either end!*/
  display: block;
  height: 15px;
  margin-top: -16px; /*One more than the height*/
  content: "";
  border-style: solid;
  border-color: #69f;
  border-width: 0 0 1px 0;
  border-radius: 15px;
}

.customrule::after {
  /*Here we create a little circle with a white background and position it centered*/
  content: " ";
  height: 6px;
  width: 6px;
  position: relative;
  margin: 0 auto;
  display: block;
  border: 1px solid #69f;
  border-radius: 6px;
  background-color: #cef;
  text-align: center;
  top: -4px; /*Move the circle up so it actually sits over the border*/
}

/** Run and Go Back button formatting **/
.button {
  font: bold .7em Arial;
  text-decoration: none; /*Prevents <a> link from being auto-underlined*/
  background-color: #ddd;
  color: #333;
  padding: 2px 6px 2px 6px;
  border: outset 2px #bbb; /*Gives buttons a nice bevel border*/
}

.button:hover {
  background-color: #eee; /*Lighten button on mouseover*/
}

.button:active {
  /*Make button appear pressed while clicking*/
  background-color: #999; /*Darken background*/
  border: inset 2px #bbb; /*Invert border*/
}



/********** JavaScript-Python Interface **********/

/** Container div for script input **/
.script-interface {
  width: 500px;
  margin: 0 auto;
}

/** Input + output textbox formatting **/
.scriptbox {
  /*Units don't have to be pixels! em is relative to font-size. Like most things in web-dev,
  the use of different units is subject to caveats and may have obscure side-effects. See
  http://kyleschaeffer.com/development/css-font-size-em-vs-px-vs-pt-vs/ for an idea of how
  these practices and effects can be in flux, and note that percents for font-size differ from
  percents used for width/height.*/
  width:  40em;
  height: 5em;
  /*Hex values with only 3 digits are shorthand for 6-digit values with each digit doubled.
  So, #abc is shorthand for #aabbcc.*/
  border: 1px solid #888;
  resize: none; /*Hides the textarea resizing control*/
}

.scriptbox:focus {
  /*':focus' in this selector is an example of a pseudo-class. Here we are specifying
  rules that apply only when the textarea is selected.  Read more - 
  https://developer.mozilla.org/en-US/docs/Web/CSS/Pseudo-classes */
  border: 2px solid #333; /*Gives a thicker border for emphasis*/
}

.ajax-status {
  text-align: center;
}

/** Status icons for AJAX submission buttons! **/
/*The ::before and ::after selectors represent pseudo-elements which you can use
to insert content before or after a given element. Good stuff.*/
.ajax-status.success::before, /*Add empty pseudo-element on left side as well,*/
.ajax-status.failure::before, /*to keep the Run button centered.*/
.ajax-status.success::after,
.ajax-status.failure::after {
  position: relative;
  left: 10px;
  margin: 0;
  padding: 0px 8px;
  content: ""; /*Necessary for the element to display*/
}

.ajax-status.success::after {
  background: transparent url('success.png') no-repeat;
}

.ajax-status.failure::after {
  background: transparent url('failure.gif') no-repeat;  
}



/********** Tabbed Menu Buttons **********/

/** Container div for tab buttons **/
.tabs-menu {
  height: 3em;
  border-bottom: 1px solid #69f; /*Separates menu buttons from content area*/
  text-align: center; /*Centers child content (the tab buttons) in the div.
  Because default div width is 100%, this centers the buttons on the page.*/
  position: relative;
}

.tabs-list {
  /*The significance of margin, padding etc. in CSS are explained at
  https://developer.mozilla.org/en-US/docs/Web/CSS/box_model
  In this case, they prevent our list items from being indented by default.
  It may actually be a good idea to specifically zero them in other places as well, in
  order to minimize cross-browser weirdness, but it makes the file longer.*/
  margin: 0 auto;
  padding: 0;
  list-style: none; /* Hides the bullet points of the unordered list items. Not strictly
  necessary (at least in modern browsers?) as list-style only affects child li elements
  with 'display:list-item;' anyway, of which we have none (see below).*/
  position: absolute;
  left: 0;
  right: 0;
  bottom: 0;
}

/** An individual item of the tab menu **/
.tab-title {
  display: inline-block; /*In short, ensures the menu buttons are placed on one line.
  The default value is list-item, which basically behaves like you'd expect a list to.
  For a crash-course on this surprisingly complex topic, check out:
  https://css-tricks.com/almanac/properties/d/display/ */
  vertical-align: bottom; /*Ensure tabs with diff. heights still meet at bottom edge*/
/*  transition: margin-top .2s ease;*/
  width: 6em; /*To stop tabs shifting from bold text*/
}

.tab-title > a {
/*The > is the child selector, which specifies that the a tag should be a direct child
of the .tab-title element. It's more efficient than the generic descendant selector.*/
  display: block; /*Ensure correct vertical space for the element*/
  margin: 0 1px; /*Adds some extra space between tab buttons*/
  padding: 5px 10px; /*Makes non-active tab buttons a bit bigger!*/
  background: #fff;
  transition: background .2s ease, color .2s ease, padding .2s ease, border .2s ease; 
  /*Add transition for hover effect*/
  /*Note: for better browser support it may be a good idea to add vendor-specific
  prefixes as described here http://webdesign.about.com/od/css/a/css-vendor-prefixes.htm
  but I'm LAZY! :) If you're in a good, HTML5/CSS3 compliant browser, it doesn't matter*/
  text-decoration: none;
  color: #000;
  border-top: 1px solid #69f;
  border-left: 1px solid #69f;
  border-right: 1px solid #69f;
  /*Bottom border provided for inactive tabs by the tabs-menu rule. For the active tab,
  not setting a border-bottom allows us to cover the tabs-menu border and make it look
  like the tab is connected, for a nice effect.*/
  /*You can uncomment the lines below if you want rounded tab buttons!*/
/*  border-top-left-radius: 5px;
  border-top-right-radius: 5px;*/
}

.tab-title > a:hover {
  /*Hover highlighting for tab buttons*/
  background: #69f;
  color: #fff;
  border-top: 1px solid #aab; /*cef,148,246,345,aab*/
  border-left: 1px solid #aab;
  border-right: 1px solid #aab;
  /*The second (white) shadow partially obscures the third, so it only appears to be
  in shadow _behind_ the button. But this also requires us to set the first shadow as
  the usual border color so that the white shadow doesn't seem to obscure the edge of
  the tab menu. The values are (x-offset y-offset blur-radius spread-radius color).*/
  box-shadow: 0 1px 0 0 #69f,
              0 5px 0 0 white,
              0 0 3px 0 #aab;
}

.tab-title.active > a,
.tab-title.active > a:hover {
  /*These styles are applied to <a> elements in the active tab both normally and when
  hovering, which means it overrides the hover-highlight effect for the tab that's
  already selected.*/
  position: relative; /*Causes properties like 'bottom' to position the element
  relative to its default un-positioned location in the page.*/
  bottom: -1px; /*Shifts active tab down, obscuring tabs-menu border for tab effect*/
  padding: 10px; /*Makes active tab nice and tall!*/
  background: #fff;
  color: #000;
  font-weight: bold;
  box-shadow: none;
}



/********** Tabbed Content Display **********/

/** Container for all the tab panels **/
#tabs-content {
  margin: 20px;
  overflow: auto; /*Content too big for the div will cause scrollbars to appear*/
  
}

/** Basic tab panel formatting **/
.tab-default,
.tab-panel {
  margin: 0 auto;
  padding: 20px;
  width: 600px;
  border: 1px solid #69f;
  overflow: hidden; /*A simpler 'clearfix' to ensure the div wraps around floated elements*/
}

/** Inactive tabs **/
.tab-default.inactive,
.tab-panel.inactive {
  /*Originally this style was applied directly to .tab-default and .tab-panel.
  The style for the active tab would override this and cause that tab to display.
  This works, but means that if someone has JS turned off they won't be able to
  see anything other than the default tab. Instead we use JavaScript to explictly
  mark tabs which are INactive, so users with JS enabled will get the shiny tab
  experience but users with JS turned off will just see all the content at once.*/
  display: none; /*The content for inactive tabs won't be shown on the page*/
}

.tab-default.active,
.tab-panel.active {
  display: block; /*Overrides the above display property, showing the content for
  the active tab (and no others).*/
}



/********** Pulsing Heart Div **********/

/* Most of the heart's CSS came from the Shapes of CSS  */
/* http://css-tricks.com/examples/ShapesOfCSS/          */
/*Kevin note: I removed the vendor prefixes myself, because screw that. They make
your CSS literally 6 times as big. If you're curious what I'm talking about and
how they're used, check out: http://webdesign.about.com/od/css/a/css-vendor-prefixes.htm
But I've made a point this far of trying to only use technologies that are actually
in the various official specifications, and those are obviously not. If you have a
modern browser this is not a problem. If you don't have a modern browser, FIX THAT.*/
.heart {
  position: relative;
  width: 100px;
  height: 90px;
  margin: 30px;
  transform: scale(1);
  transition: all 1s; 
}
.heart.css {  
  animation-delay:1s;
}
.heart.animated {
  animation: 1600ms pulsate infinite alternate ease-in-out;
}
.heart:before,
.heart:after { 
  position: absolute; 
  content: "";
  left: 50px;
  top: 0;
  width: 50px;
  height: 80px;
  background: red;
  border-radius: 50px 50px 0 0;
  transform: rotate(-45deg);
  transform-origin: 0 100%;
}
.heart:after {
  left: 0;
  transform: rotate(45deg);
  transform-origin :100% 100%;
}
.heart.css:hover {
  transform: scale(2);
  animation: none;
}
@keyframes pulsate {
  0% { transform: scale(1); }
  50% { transform: scale(1.3); }
  100% { transform: scale(1); }
}
